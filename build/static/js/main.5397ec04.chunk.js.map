{"version":3,"sources":["ChartViewer.js","ChartData.jsx","CryptoTracker.jsx","App.js","index.js"],"names":["ApexChart","props","series","name","data","id","options","chart","height","type","zoom","enabled","dataLabels","color","stroke","width","curve","xaxis","labels","formatter","value","tooltip","style","colors","fill","gradient","shadeIntensity","inverseColors","gradientToColors","opacityFrom","opacityTo","stops","ChartData","cryptoName","isExpanded","useState","count","setCount","x","y","chatData","setChatData","xAsix","setxAsix","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useInterval","sec_percent","START_PRICE","toFixed","className","isLoading","CryptoTracker","setIsExpanded","useQuery","a","fetch","response","json","useGetCardData","refetchInterval","staleTime","image","market_data","onClick","src","large","alt","queryClient","QueryClient","App","QueryClientProvider","client","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.5397ec04.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\nexport default function ApexChart(props) {\r\n  const series = [\r\n    {\r\n      name: \"xx\",\r\n      data: props.data\r\n    }\r\n  ];\r\n  const options = {\r\n    chart: {\r\n      height: 350,\r\n      type: \"line\",\r\n      zoom: {\r\n        enabled: false\r\n      }\r\n    },\r\n    dataLabels: {\r\n      enabled: false,\r\n      color: \"#000\"\r\n    },\r\n    stroke: {\r\n      width: 2,\r\n      curve: \"smooth\"\r\n    },\r\n    xaxis: {\r\n        labels: {\r\n            formatter: function(value) {\r\n               return '';\r\n            }\r\n        }\r\n    },\r\n    tooltip: {\r\n        style: {\r\n            color: \"#000\"\r\n        }\r\n    },\r\n    colors: [\"#210124\"],\r\n    fill: {\r\n      type: \"gradient\",\r\n      gradient: {\r\n        shadeIntensity: 1,\r\n        inverseColors: true,\r\n        gradientToColors: [\"#DB162F\"],\r\n        opacityFrom: 1,\r\n        opacityTo: 1,\r\n        type: \"vertical\",\r\n        stops: [0, 10]\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <div id=\"chart\">\r\n      <Chart options={options} series={series} type=\"line\" height={350} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"react-query\";\nimport {\n  VictoryLine,\n  VictoryChart,\n  VictoryAxis,\n  VictoryTooltip,\n  VictoryVoronoiContainer\n} from \"victory\";\n\nimport format from \"date-fns/format\";\nimport { formatPrice } from \"./CryptoTracker\";\n\nimport ChartViewer from \"./ChartViewer\";\n\nconst ChartData = ({ cryptoName, isExpanded }) => {\n  let [count, setCount] = useState(650);\n  let [chatData, setChatData] = useState([{\n    x: 0,\n    y: 650\n  }]);\n  let [xAsix, setxAsix] = useState(1)\n\n  const SECOND_MS = 1000;\n  const START_PRICE = 650;\n\n  useInterval(() => {\n    // Your custom logic here\n    let sec_percent = START_PRICE * 10 / (365 * 24 * 3600);\n\n    const data = {\n      x: xAsix,\n      y: (count + sec_percent).toFixed(5)\n    };\n\n    setChatData([...chatData, data]);\n    setCount(count + sec_percent);\n    setxAsix(xAsix + 1);\n  }, SECOND_MS);\n\n  function useInterval(callback, delay) {\n    const savedCallback = useRef();\n  \n    // Remember the latest function.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n  \n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n\n  return (\n    <div className=\"chart\">\n      {isLoading ? (\n        <div className=\"loading-container\">\n          <span>Loading...</span>\n        </div>\n      ) : !isExpanded ? (\n        <div>\n          <ChartViewer data={chatData}  />\n        </div>\n      ) : (<ChartViewer data={chatData} />)}\n    </div>\n  );\n};\n\nexport default ChartData;\n","import React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport ChartData from \"./ChartData\";\n\nconst useGetCardData = (cryptoName, options) => {\n  return useQuery(\n    `${cryptoName}-card`,\n    async () => {\n      const response = await fetch(\n        `https://api.coingecko.com/api/v3/coins/${cryptoName}`\n      );\n      return await response.json();\n    },\n    options\n  );\n};\n\nexport const formatPrice = (price) => {\n  const formatConfig = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 2\n  });\n\n  return formatConfig.format(price);\n};\n\nconst formatPlusMinus = (priceChange) => {\n  const isPositive = Math.sign(priceChange) >= 0;\n\n  return (\n    <span className={`${isPositive ? \"positive\" : \"negative\"}`}>\n      {`${isPositive ? \"+\" : \"\"}${priceChange.toFixed(2)}%`}\n    </span>\n  );\n};\n\n/*\n * Read the blog post here:\n * https://letsbuildui.dev/articles/bitcoin-price-tracking-with-react-query\n */\nconst CryptoTracker = ({ cryptoName }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const { data, isLoading } = useGetCardData(cryptoName, {\n    refetchInterval: 60000,\n    staleTime: 60000\n  });\n\n  const onCardClick = () => {\n    if (!isExpanded) {\n      setIsExpanded(true);\n    }\n  };\n\n  if (isLoading) return null;\n\n  const { image, name, market_data: marketData } = data;\n\n  return (\n    <div className={`card ${isExpanded ? \"expanded\" : \"collapsed\"}`}>\n      {!isExpanded && <button onClick={onCardClick} className=\"hitzone\" />}\n      <div className=\"card-inner\">\n        {isExpanded && (\n          <button className=\"close\" onClick={() => setIsExpanded(false)}>\n            Close\n          </button>\n        )}\n        <div className=\"top-data\">\n          <img src={image?.large} alt={`${name} logo`} />\n          <h3 className=\"crypto-name\">My Fomula</h3>\n        </div>\n        <ChartData isExpanded={isExpanded} cryptoName={cryptoName} />\n      </div>\n    </div>\n  );\n};\n\nexport default CryptoTracker;\n","import { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport CryptoTracker from \"./CryptoTracker\";\nimport \"./styles.css\";\n\nconst queryClient = new QueryClient();\n\nconst App = () => (\n  <QueryClientProvider client={queryClient}>\n    <CryptoTracker cryptoName=\"bitcoin\" />\n    <ReactQueryDevtools />\n  </QueryClientProvider>\n);\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}